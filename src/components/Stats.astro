---
const stats = [
  { number: "520,000+", label: "Votantes activos", icon: "/voters.png" },
  { number: "25,000+", label: "Voluntarios", icon: "/volunteers.png" },
  { number: "175+", label: "Días en campaña", icon: "/campaign.png" },
  { number: "35,000+", label: "Donantes", icon: "/donors.png" },
];
---

<section class="py-20" aria-labelledby="stats-heading" id="estadisticas">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12 fade-in-element opacity-0 translate-y-5">
      <p class="text-red-500 font-semibold mb-4">ÚNETE A NUESTRO MOVIMIENTO</p>
      <h2 class="text-4xl font-bold" id="stats-heading">Tenemos una gran comunidad comprometida</h2>
      <p class="text-gray-600 mt-4">
        "Lorem ipsum dolor sit amet consectetur adipisicing elit solo sem aliquae
        eras orci mi gravida libero feugiat dia aliquit el."
      </p>
    </div>

    <div class="grid md:grid-cols-4 gap-8" role="list">
      {
        stats.map((stat, index) => (
          <div class={`text-center fade-in-element opacity-0 translate-y-5`} role="listitem" style={`transition-delay: ${index * 150}ms`}>
            <div class="w-20 h-20 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center">
              <img src={stat.icon} alt={`Ícono de ${stat.label}`} class="w-10 h-10" width="40" height="40" />
            </div>
            <h3 class="text-3xl font-bold mb-2">{stat.number}</h3>
            <p class="text-gray-600">{stat.label}</p>
          </div>
        ))
      }
    </div>

    <div class="flex justify-center gap-4 mt-12 fade-in-element opacity-0 translate-y-5" style="transition-delay: 600ms">
      <a href="#donate" id="donate" class="bg-red-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-red-600 transition-colors" role="button">
        Donar
      </a>
      <a href="#join" id="join" class="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors" role="button">
        Únete a nuestro movimiento
      </a>
    </div>
  </div>
</section>

<style>
  .fade-in-element {
    transition: opacity 0.8s ease-out, transform 0.8s cubic-bezier(0.16, 1, 0.3, 1);
  }
  
  .fade-in-active {
    opacity: 1 !important;
    transform: translateY(0) !important;
  }
</style>

<script>
  // Espera a que el DOM esté cargado
  document.addEventListener('DOMContentLoaded', () => {
    const fadeElements = document.querySelectorAll('.fade-in-element');
    
    // Configuración del Intersection Observer
    const options = {
      root: null, // viewport
      rootMargin: '0px',
      threshold: 0.1 // 10% del elemento visible
    };
    
    // Callback que se ejecuta cuando un elemento entra en el viewport
    const callback = (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Añade la clase para activar la animación
          entry.target.classList.add('fade-in-active');
          // Deja de observar el elemento una vez que se ha animado
          observer.unobserve(entry.target);
        }
      });
    };
    
    // Crea una instancia del Intersection Observer
    const observer = new IntersectionObserver(callback, options);
    
    // Observa todos los elementos con la clase fade-in-element
    fadeElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>